#!/usr/bin/env python

import RPi.GPIO as gpio
from enum import Enum
import time
import roslaunch
import rospkg
from pathlib import Path

class RobotState(Enum):
    standby = 0
    brought_up = 1
    running = 2


gpio.setmode(gpio.BOARD)

STRANGE_CONTROLLER_PIN = 3
CHARM_CONTROLLER_PIN = 5

STRANGE_INDICATOR_PIN = 37
CHARM_INDICATOR_PIN = 36

gpio.setup((STRANGE_CONTROLLER_PIN, CHARM_CONTROLLER_PIN), gpio.IN)
gpio.setup((STRANGE_INDICATOR_PIN, CHARM_INDICATOR_PIN), gpio.OUT)

curr_state = RobotState.standby

def gpio_to_binary(inp):
    if inp == gpio.HIGH:
        return 1
    else:
        return 0



rospack = rospkg.RosPack()
bringup_pkg = Path(rospack.get_path('mrobosub_bringup'))
planning_pkg = Path(rospack.get_path('mrobosub_planning'))

planner_launch = None
bringup_launch = None

while True:
    prev_state = curr_state

    strange_input = gpio_to_binary(gpio.input(STRANGE_CONTROLLER_PIN))
    charm_input = gpio_to_binary(gpio.input(CHARM_CONTROLLER_PIN))

    curr_state = RobotState(strange_input + charm_input)

    if curr_state == prev_state:
        continue
    elif curr_state == RobotState.brought_up:
        if not planner_launch is None:
            planner_launch.shutdown()
            planner_launch = None
        if not bringup_launch is None:
            bringup_launch.shutdown()
            bringup_launch = None

        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        roslaunch.configure_logging(uuid)
        bringup_launch = roslaunch.parent.ROSLaunchParent(uuid, [str(bringup_pkg / 'launch' / 'bringup.launch')])
        bringup_launch.start()
    elif curr_state == RobotState.running:
        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        roslaunch.configure_logging(uuid)
        planner_launch = roslaunch.parent.ROSLaunchParent(uuid, [str(planning_pkg / 'launch' / 'captain.launch')])
        planner_launch.start()
    else: # curr_state == RobotState.standby
        if not bringup_launch is None:
            bringup_launch.shutdown()
            bringup_launch = None
        if not planner_launch is None:
            planner_launch.shutdown()
            planner_launch = None

    gpio.output(STRANGE_INDICATOR_PIN, bool(strange_input))
    gpio.output(CHARM_INDICATOR_PIN, bool(charm_input))

    time.sleep(0.01)


gpio.cleanup()






