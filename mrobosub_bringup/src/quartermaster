#!/usr/bin/env python

import RPi.GPIO as gpio
from enum import Enum
import time
import roslaunch
import rospkg
import rospy
from std_msgs.msg import Bool
from std_srvs.srv import SetBool, Trigger
from pathlib import Path

class RobotState(Enum):
    ambient = 0
    ready = 1
    running = 2

def gpio_to_binary(inp):
    if inp == gpio.HIGH:
        return 1
    else:
        return 0

STRANGE_CONTROLLER_PIN = 3
CHARM_CONTROLLER_PIN = 5

ON_INDICATOR_PIN = 32
STRANGE_INDICATOR_PIN = 37
CHARM_INDICATOR_PIN = 36

rospy.init_node('quartermaster')

gpio.setmode(gpio.BOARD)
gpio.setup((STRANGE_CONTROLLER_PIN, CHARM_CONTROLLER_PIN), gpio.IN)
gpio.setup((ON_INDICATOR_PIN, STRANGE_INDICATOR_PIN, CHARM_INDICATOR_PIN), gpio.OUT)

curr_state = RobotState.ambient

rospack = rospkg.RosPack()
planning_pkg = Path(rospack.get_path('mrobosub_planning'))
capt_launch = None

rospy.wait_for_service('/arming/cmd')
arm_srv = rospy.ServiceProxy('/arming/cmd', SetBool)

# /buttons/[strange/charm]
rospy.wait_for_service('/localization/zero_state')
zero_srv = rospy.ServiceProxy('/localization/zero_state', Trigger)

gpio.output(ON_INDICATOR_PIN, gpio.HIGH)

rate = rospy.Rate(10)

hall_effect_inputs = {'strange': False, 'charm': False}

def set_strange(new_value: Bool):
    hall_effect_inputs['strange'] = new_value.data

def set_charm(new_value: Bool):
    hall_effect_inputs['charm'] = new_value.data

rospy.Subscriber('/buttons/strange', Bool, set_strange)
rospy.Subscriber('/buttons/charm', Bool, set_charm)

while not rospy.is_shutdown():
    prev_state = curr_state

    strange_input = hall_effect_inputs['strange']
    charm_input = hall_effect_inputs['charm']

    curr_state = RobotState(strange_input + charm_input)

    if curr_state == prev_state:
        continue
    elif curr_state == RobotState.ambient:
        arm_resp = arm_srv(False)
        rospy.loginfo(f'arming response: {arm_resp.success}; {arm_resp.message}')
    elif curr_state == RobotState.ready:
        #if not capt_launch is None:
        #    capt_launch.shutdown()
        #    capt_launch = None
        if prev_state == RobotState.running:
            soft_stop = rospy.ServiceProxy('/captain/soft_stop', Trigger)
            res = soft_stop()
        zero_srv()
        arm_resp = arm_srv(True)
        rospy.loginfo(f'arming response: {arm_resp.success}; {arm_resp.message}')
    else:
        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        roslaunch.configure_logging(uuid)
        capt_launch = roslaunch.parent.ROSLaunchParent(
            uuid, [str(planning_pkg / 'launch' / 'captain.launch')]
        )
        capt_launch.start()

    gpio.output(STRANGE_INDICATOR_PIN, bool(strange_input))
    gpio.output(CHARM_INDICATOR_PIN, bool(charm_input))

    rate.sleep()


gpio.cleanup()

