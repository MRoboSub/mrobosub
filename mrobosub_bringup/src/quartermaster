#!/usr/bin/env python

from enum import Enum
import time
import roslaunch
import rospkg
import rospy
from std_msgs.msg import Bool, Float64
from std_srvs.srv import SetBool, Trigger
from pathlib import Path

USE_ML = True

class RobotState(Enum):
    ambient = 0
    ready = 1
    running = 2

rospy.init_node('quartermaster')

curr_state = RobotState.ambient

rospack = rospkg.RosPack()
planning_pkg = Path(rospack.get_path('mrobosub_planning'))
capt_launch = None

rospy.wait_for_service('/arming/cmd')
arm_srv = rospy.ServiceProxy('/arming/cmd', SetBool)

rospy.wait_for_service('/localization/zero_state')
zero_srv = rospy.ServiceProxy('/localization/zero_state', Trigger)

if USE_ML:
    rospy.wait_for_service('/object_position/gate_red')

rate = rospy.Rate(10)
target_twist_yaw_pub = rospy.Publisher('/target_twist/yaw', Float64, queue_size=1)
target_twist_roll_pub = rospy.Publisher('/target_twist/roll', Float64, queue_size=1)
target_twist_surge_pub = rospy.Publisher('/target_twist/surge', Float64, queue_size=1)
target_twist_sway_pub = rospy.Publisher('/target_twist/sway', Float64, queue_size=1)
target_twist_heave_pub = rospy.Publisher('/target_twist/heave', Float64, queue_size = 1)

led_hall_effect_1_pub = rospy.Publisher('/led/hall_effect_1', Bool, queue_size=1)
led_hall_effect_2_pub = rospy.Publisher('/led/hall_effect_2', Bool, queue_size=1)
led_on_pub = rospy.Publisher('/led/on', Bool, queue_size=1)

hall_effect_inputs = [False, False]

def set_hall_effect_1(new_value: Bool):
    hall_effect_inputs[0] = new_value.data

def set_hall_effect_2(new_value: Bool):
    hall_effect_inputs[1] = new_value.data

rospy.Subscriber('/buttons/hall_effect_1', Bool, set_hall_effect_1)
rospy.Subscriber('/buttons/hall_effect_2', Bool, set_hall_effect_2)

#TODO This still needs to be checked 
# these are for stickiness because hall effects might be flickering needs to be checked
hall_effect_1_input = False
hall_effect_2_input = False

while not rospy.is_shutdown(): 
    led_on_pub.publish(True)

    # KEEP THIS LINE
    rate.sleep()

    prev_state = curr_state
    # TODO Check with electrical if hall effects are still flashing without stickiness 
    hall_effect_1_input = hall_effect_inputs[0] or hall_effect_1_input
    hall_effect_2_input = hall_effect_inputs[1] or hall_effect_2_input

    curr_state = RobotState(hall_effect_1_input + hall_effect_2_input)
    if curr_state != prev_state:
        print(f'{hall_effect_1_input=} {hall_effect_2_input=}')

    if curr_state == prev_state:
        continue
    elif curr_state == RobotState.ambient:
        arm_resp = arm_srv(False)
        rospy.loginfo(f'arming response: {arm_resp.success}; {arm_resp.message}')
    elif curr_state == RobotState.ready:
        zero_srv()
        
        if capt_launch is not None:
            capt_launch.shutdown()
            capt_launch = None
        
        if prev_state == RobotState.running:
            arm_srv(True)
            soft_stop = rospy.ServiceProxy('/captain/soft_stop', Trigger)
            try:
                rospy.loginfo('Soft stopping state machine (from quartermaster)')
                res = soft_stop()
                rospy.loginfo(f'soft stop response: {res.success}; {res.message}')
            except:
                pass

        else: # Previous state is ambient
            arm_resp = arm_srv(True)
            retries = 0
            while not arm_resp.success and retries < 10:
                arm_resp = arm_srv(True)
                retries += 1
            rospy.loginfo(f'arming response: {arm_resp.success}; {arm_resp.message}; {retries} retries')
    else: # Gone to running state
        rospy.loginfo('starting state machine (from quartermaster)')
        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        roslaunch.configure_logging(uuid)
        capt_launch = roslaunch.parent.ROSLaunchParent(
            uuid, [str(planning_pkg / 'launch' / 'captain.launch')]
        )
        capt_launch.start()

    led_hall_effect_1_pub.publish(bool(hall_effect_1_input))
    led_hall_effect_2_pub.publish(bool(hall_effect_2_input))


