#!/usr/bin/env python

import Jetson.GPIO as gpio
from enum import Enum
import time
import roslaunch

class RobotState(Enum):
    standby = 0
    brought_up = 1
    running = 2


gpio.setmode(gpio.BOARD)

STRANGE_CONTROLLER_PIN = 79
CHARM_CONTROLLER_PIN = 89

gpio.setup((BRINGUP_CONTROLLER_PIN, LAUNCH_CONTROLLER_PIN), gpio.IN)

curr_state = RobotState.standby

def gpio_to_binary(inp):
    if inp == gpio.HIGH:
        return 1
    else:
        return 0

# uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
# roslaunch.configure_logging(uuid)
# launch_parent = roslaunch.parent.ROSLaunchParent(uuid, 


while True:
    prev_state = curr_state

    strange_input = gpio_to_binary(gpio.input(STRANGE_CONTROLLER_PIN))
    charm_input = gpio_to_binary(gpio.input(CHARM_CONTROLLER_PIN))

    curr_state = RobotState(strange_input + charm_input)

    if curr_state == prev_state:
        continue
    elif curr_state == RobotState.brought_up:
        pass
        # roslaunch bringup
        # run mavros
    elif curr_state == RobotState.running:
        pass
        # launch state machine
    else: # curr_state == RobotState.standby
        pass
        # kill ros

    time.sleep(0.01)


gpio.cleanup()






